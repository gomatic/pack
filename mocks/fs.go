// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpack/pack (interfaces: FS)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockFS is a mock of FS interface
type MockFS struct {
	ctrl     *gomock.Controller
	recorder *MockFSMockRecorder
}

// MockFSMockRecorder is the mock recorder for MockFS
type MockFSMockRecorder struct {
	mock *MockFS
}

// NewMockFS creates a new mock instance
func NewMockFS(ctrl *gomock.Controller) *MockFS {
	mock := &MockFS{ctrl: ctrl}
	mock.recorder = &MockFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFS) EXPECT() *MockFSMockRecorder {
	return m.recorder
}

// CreateSingleFileTar mocks base method
func (m *MockFS) CreateSingleFileTar(arg0, arg1 string) (io.Reader, error) {
	ret := m.ctrl.Call(m, "CreateSingleFileTar", arg0, arg1)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSingleFileTar indicates an expected call of CreateSingleFileTar
func (mr *MockFSMockRecorder) CreateSingleFileTar(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleFileTar", reflect.TypeOf((*MockFS)(nil).CreateSingleFileTar), arg0, arg1)
}

// CreateTGZFile mocks base method
func (m *MockFS) CreateTGZFile(arg0, arg1, arg2 string, arg3, arg4 int) error {
	ret := m.ctrl.Call(m, "CreateTGZFile", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTGZFile indicates an expected call of CreateTGZFile
func (mr *MockFSMockRecorder) CreateTGZFile(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTGZFile", reflect.TypeOf((*MockFS)(nil).CreateTGZFile), arg0, arg1, arg2, arg3, arg4)
}

// CreateTarReader mocks base method
func (m *MockFS) CreateTarReader(arg0, arg1 string, arg2, arg3 int) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "CreateTarReader", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTarReader indicates an expected call of CreateTarReader
func (mr *MockFSMockRecorder) CreateTarReader(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTarReader", reflect.TypeOf((*MockFS)(nil).CreateTarReader), arg0, arg1, arg2, arg3)
}

// Untar mocks base method
func (m *MockFS) Untar(arg0 io.Reader, arg1 string) error {
	ret := m.ctrl.Call(m, "Untar", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Untar indicates an expected call of Untar
func (mr *MockFSMockRecorder) Untar(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untar", reflect.TypeOf((*MockFS)(nil).Untar), arg0, arg1)
}
